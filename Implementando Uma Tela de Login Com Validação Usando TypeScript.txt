PASSO A PASSO:
Implementar uma tela de login com validação usando TypeScript envolve várias etapas, incluindo a criação do HTML para a interface do usuário, a estilização com CSS e a implementação da lógica de validação com TypeScript. Vou fornecer um exemplo completo que cobre essas etapas.

## 1. Estrutura HTML

Vamos criar um arquivo HTML básico para a nossa tela de login.

```html
<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Tela de Login</title>
  <link rel="stylesheet" href="styles.css">
</head>
<body>
  <div class="login-container">
    <h2>Login</h2>
    <form id="loginForm">
      <div class="form-group">
        <label for="username">Usuário</label>
        <input type="text" id="username" name="username" required>
      </div>
      <div class="form-group">
        <label for="password">Senha</label>
        <input type="password" id="password" name="password" required>
      </div>
      <button type="submit">Entrar</button>
      <p id="error-message" class="error-message"></p>
    </form>
  </div>
  <script src="script.js" defer></script>
</body>
</html>
```

## 2. Estilo CSS

Vamos adicionar um pouco de estilo para a tela de login.

```css
/* styles.css */
body {
  font-family: Arial, sans-serif;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin: 0;
  background-color: #f0f0f0;
}

.login-container {
  background-color: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  width: 300px;
}

.login-container h2 {
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
}

.form-group input {
  width: 100%;
  padding: 8px;
  box-sizing: border-box;
}

button {
  width: 100%;
  padding: 10px;
  background-color: #007BFF;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

.error-message {
  color: red;
  margin-top: 10px;
  display: none;
}
```

## 3. Lógica de Validação com TypeScript

Finalmente, vamos implementar a lógica de validação com TypeScript.

```typescript
// script.ts
const loginForm = document.getElementById('loginForm') as HTMLFormElement;
const usernameInput = document.getElementById('username') as HTMLInputElement;
const passwordInput = document.getElementById('password') as HTMLInputElement;
const errorMessage = document.getElementById('error-message') as HTMLParagraphElement;

loginForm.addEventListener('submit', function(event) {
  event.preventDefault();

  const username = usernameInput.value.trim();
  const password = passwordInput.value.trim();

  if (validateInputs(username, password)) {
    // Sucesso no login
    console.log('Login bem-sucedido!');
  } else {
    // Exibir mensagem de erro
    errorMessage.textContent = 'Nome de usuário ou senha inválidos.';
    errorMessage.style.display = 'block';
  }
});

function validateInputs(username: string, password: string): boolean {
  if (username === '' || password === '') {
    return false;
  }

  // Aqui você pode adicionar validações mais complexas, como verificar o formato do email, 
  // o comprimento mínimo da senha, etc.
  return true;
}
```

## 4. Configurando o TypeScript

Para compilar o TypeScript em JavaScript, você precisará configurar um ambiente de desenvolvimento TypeScript. Aqui está um exemplo de `tsconfig.json` básico:

```json
{
  "compilerOptions": {
    "target": "ES5",
    "module": "commonjs",
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true
  },
  "include": ["src/**/*"]
}
```

Estrutura do projeto:

```
/login-app
|-- index.html
|-- styles.css
|-- src
|   |-- script.ts
|-- dist
|-- tsconfig.json
|-- package.json
```

## 5. Pacotes NPM

Você também precisará instalar o TypeScript e configurar os scripts npm:

```bash
npm init -y
npm install typescript --save-dev
npx tsc --init
```

Adicione os seguintes scripts ao seu `package.json`:

```json
"scripts": {
  "build": "tsc",
  "start": "tsc && lite-server"
},
```

Certifique-se de ter o `lite-server` instalado:

```bash
npm install lite-server --save-dev
```

Agora, você pode compilar seu TypeScript e iniciar o servidor:

```bash
npm run start
```

Isso deve compilar o TypeScript, gerar o arquivo `script.js` na pasta `dist` e iniciar um servidor local para que você possa ver sua tela de login em ação.
